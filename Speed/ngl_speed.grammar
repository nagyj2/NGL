# NGL Speed v2.0

# NGL started out as a very crude and hard to read language before it changed
# course and became an assembly-like language. This grammar is representative
# of what the old language was like. This grammar is an experiment to compile
# the old grammar into the new NGL v2.1 language.

TODO:
	- Allow chaining of STMTs with '&'
		- 'stmt1 & stmt2' would be treated as a single statement.
		- Either replace '{}' or add another version.
			- Is shorter than '{}'
	- Remove ':' in loops where unneeded

STRONGSYM	 := ? | ! | $ | \ | { | } | ] | # | % | @ | ^ | <<EOF>>

PROGRAM  	 := {LINES}
							<< A program is a series of lines. >>

LINES		 	 := STMT ';'
							<< A single statement. Semicolon is not required if the subsequent statement starts with a strong symbol. >>

STMT     	 := IDENT ['+' | '-' | '*' | '/' | '<>' | '='] EXPR {IDENT ['+' | '-' | '*' | '/' | '<>' | '='] EXPR}
							<< Assign EXPR to IDENT by default. If a special operator is used, use shorthand assignment operator. >>

		 				| '?' EXPR STMT ['~?' STMT]
							<< If statement with optional else. >>

						| '!' EXPR
							<< Print statement. >>

						| '$' EXPR ':' STMT ':' STMT ':' STMT
							<< For-style loop. EXPR is loop condition, 1st STMT is init code, 2nd is step code and 3rd is loop body. >>

						| ('#' | '%' | '@' | '^') IDENT {[','] IDENT}
							<< Declare a variable in advance of it being used. Not required. >>

						| '\\'
							<< Quit program. >>

						| '\' EXPR
							<< Return statement. Only usable inside a function. >>

						| '{' {LINES} '}'
							<< Compound statement. >>

						| STMT '&' STMT
							<< Chained statement. >>

EXPR		 	 := '![' ['#' | '%' | '@' | '^'] ':' {('#' | '%' | '@' | '^') IDENT {IDENT}}] ':' PROGRAM ']'
							<< Function declaration. First type is return type. Must be agree with all return branches in code, optional. Types and IDENTs are inputs and their types. PROGRAM is the function body. >>
		 				| EXPR_L0
		    
EXPR_L0	 	 := EXPR_L1 {('/\' | '\/') EXPR_L1}
							<< /\ : AND, \/ : OR >>

EXPR_L1	 	 := EXPR_L2 [('=') EXPR_L2]
							<< = : Equality >>

EXPR_L2	 	 := EXPR_L3 {'<' | '>' | '<|' | '|>') EXPR_L3}
							<< < : Less than, > : Greater than, <| : Less than/ equal to, |> : Greater than/ equal to >>

EXPR_L3	 	 := EXPR_L4 {('+' | '-') EXPR_L4}
							<< + : Addition, - : Subtraction >>

EXPR_L4	 	 := EXPR_L5 {('*' | '/' | '<>') EXPR_L5}
							<< * : Multiplication, / : Division, <> : Modulo >>

EXPR_L5	 	 := EXPR_L6 {('|' EXPR_L6}
							<< | : Alternative >>

EXPR_L6	 	 := ['~' | '+' | '-'] SUBATOM
							<< ~ : NOT, + : Positive, - : Negative >>

SUBATOM		 := ['#' | '%' | '@' | '^'] ATOM
							<< # : Cast Number, % : Cast Float, @ : Cast String, ^ : Cast Boolean >>

ATOM			 := IDENT
							<< An identifier. >>

		 				| '_'
							<< Boolean true. >>

		 				| ''' .* '''
							<< String literal. >>

		 				| '(' EXPR ')'
							<< Parenthesized expression. >>

		 				| '.'
		 					<< Keyboard input. String type by default. >>

			 			| '?[' IDENT ':' [EXPR  {[','] EXPR }] ']'
			 				<< Function call. IDENT is function name and EXPRs are arguments. >>

IDENT   	 := [A-Za-z]
							<< Identifiers should be single characters. >>

		    		| '`' [A-Za-z_] [A-Za-z0-9_]* '`'
							<< If required, multichar variable names can be used with backquotes >>
