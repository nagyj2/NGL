# NGL Speed v2.0

# NGL started out as a very crude and hard to read language before it changed
# course and became an assembly-like language. This grammar is representative
# of what the old language was like. This grammar is an experiment to compile
# the old grammar into the new NGL v2.1 language.

TOFIX = Compound statements

TOADD = 'a = [| x y z |]' : a = x and a = y and a = z -> Doesn't make sense
      | 'a = {| x y z |}' : a = x or  a = y or  a = z -> Less compact
      | 'a = x | y | z' : a = x or  a = y or  a = z -> Works well!

ex.
n = 20
i = 0
$ i<|n : i1 : i + 1 : {
|======================|
?i<>3=0!i?i<>5=0!i
|==========||==========|
?i<>3|5=0!i
|======================|
}; 


PROGRAM        := {LINES}

LINES          := STMT ';'

STMT           := IDENT ['+' | '-' | '*' | '/' | '<>' | '='] EXPR {IDENT ['+' | '-' | '*' | '/' | '<>' | '='] EXPR}
                | '?' EXPR STMT ['~?' STMT]
                | '!' EXPR
                | '$' EXPR ':' STMT ':' STMT ':' STMT
                | ('#' | '%' | '@' | '^') IDENT {[','] IDENT}
                | '\' ('\' | EXPR)
                | '{' {LINES} '}'

EXPR           := '![' ['#' | '%' | '@' | '^'] ':' {('#' | '%' | '@' | '^') IDENT {IDENT}}] ':' PROGRAM ']'
                | EXPR_L0
                
EXPR_L0        := EXPR_L1 {('/\' | '\/') EXPR_L1}

EXPR_L1        := EXPR_L2 [('=') EXPR_L2]

EXPR_L2        := EXPR_L3 {'<' | '>' | '<|' | '|>') EXPR_L3}

EXPR_L3        := EXPR_L4 {('+' | '-') EXPR_L4}

EXPR_L4        := EXPR_L5 {('*' | '/' | '<>') EXPR_L5}

EXPR_L5        := ['~' | '+' | '-'] SUBATOM

SUBATOM        := ['#' | '%' | '@' | '^'] ATOM

ATOM           := IDENT
                | '_'
                | RAW_STRING
                | '(' EXPR ')'
                | '.'
                | '?[' IDENT ':' [EXPR  {[','] EXPR }] ']'

IDENT          := '`' [A-Za-z_] [A-Za-z0-9_]* '`'
                | [A-Za-z]
 