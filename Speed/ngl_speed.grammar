# NGL Speed v1.0

# NGL started out as a very crude and hard to read language before it changed
# course and became an assembly-like language. This grammar is an experiment to
# compile the old grammar into the new NGL v2.1 language.

TOFIX = Compound statements

PROGRAM        := {LINES}

LINES          := STMT ';'

STMT           := IDENT ['+' | '-' | '*' | '/' | '<>' | '='] EXPR {IDENT ['+' | '-' | '*' | '/' | '<>' | '='] EXPR}
                | '?' EXPR STMT ['~?' STMT]
                | '!' EXPR
                | '$' EXPR ':' STMT ':' STMT ':' STMT
                | '\' ('\' | EXPR)
                | '{' {LINES} '}'
                | ('#' | '%' | '@' | '^') IDENT {[','] IDENT}

EXPR           := '![' ('#' | '%' | '@' | '^') ':' [IDENT {IDENT}] ':' PROGRAM ']'
                | EXPR_L0
                
EXPR_L0        := EXPR_L1 {('&' | '|') EXPR_L1}

EXPR_L1        := EXPR_L2 {('=' | '>' | '<') EXPR_L2}

EXPR_L2        := EXPR_L3 {('+' | '-') EXPR_L3}

EXPR_L3        := EXPR_L4 {('*' | '/' | '<>') EXPR_L4}

EXPR_L4        := ['~' | '+' | '-'] SUBATOM

SUBATOM        := ['#' | '%' | '@' | '^'] ATOM

ATOM           := IDENT
                | '_'
                | RAW_STRING
                | '(' EXPR ')'
                | '.'
                | '?[' IDENT ':' [EXPR  {[','] EXPR }] ']'
